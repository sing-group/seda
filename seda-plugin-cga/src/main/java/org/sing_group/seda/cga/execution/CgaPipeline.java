/*
 * #%L
 * SEquence DAtaset builder CGA Omega plugin
 * %%
 * Copyright (C) 2017 - 2022 Jorge Vieira, Cristina Vieira, Noé Vázquez, Miguel Reboiro-Jato and Hugo López-Fernández
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
package org.sing_group.seda.cga.execution;

import static org.sing_group.seda.io.FastaWriter.writeFasta;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.sing_group.seda.datatype.SequencesGroup;

public class CgaPipeline {
  private static final String INPUT_FASTA = "input.fasta";
  private static final String REFERENCE_FASTA = "ref.fasta";
  private static final String PARAMS = "cga.params";
  private static final String README = "README.txt";

  private CgaBinariesExecutor cgaBinaries;
  private CgaPipelineParameters parameters;
  private SequencesGroup input;
  private SequencesGroup reference;

  public CgaPipeline(
    CgaBinariesExecutor cgaBinaries, CgaPipelineParameters parameters, SequencesGroup input, SequencesGroup reference
  ) throws IOException {
    this.cgaBinaries = cgaBinaries;
    this.parameters = parameters;
    this.input = input;
    this.reference = reference;
  }

  public void run() throws IOException, InterruptedException {
    this.initWorkingDir();
    this.cgaBinaries.run(this.parameters.getWorkingDir(), this.parameters.getAdditionalCompiParameters());
  }

  private void initWorkingDir() throws IOException, InterruptedException {
    File workingDir = this.parameters.getWorkingDir();

    this.cgaBinaries.initWorkingDir(workingDir, INPUT_FASTA, REFERENCE_FASTA, PARAMS, README);

    writeFasta(new File(workingDir, INPUT_FASTA).toPath(), this.input.getSequences());
    writeFasta(new File(workingDir, REFERENCE_FASTA).toPath(), this.reference.getSequences());

    this.parameters.store(new FileOutputStream(new File(workingDir, PARAMS)), "Generated by SEDA");
  }
}
